#include <iostream>
#include <thread>
//This is the function that will run in parallel
// It will be passed to the thread
void thread_method() {
	std::cout << "Function running in thread " << std::endl;
}
int main() {
	//This statement will launch thread in parallel to main function
	std::thread t(thread_method);
	std::cout << "\nThe main function execution\n";
	//This is how we join the new thread with main
	t.join();
	getchar();
	return 0;
}




g++ mth.cpp  -lpthread 
./a.out





#include <iostream>
#include <thread>
static const int num_of_threads = 10;
//This is the function that will run in parallel
// It will be passed to the thread
void thread_method(int thread_id) {
	std::cout << "Function running in thread " << thread_id << std::endl;
}
int main() {
	std::thread threads[num_of_threads];
	//This statement will launch multiple threads in loop
	for (int i = 0; i < num_of_threads; ++i) {
		threads[i] = std::thread(thread_method, i);
	}
	std::cout << "The main function execution\n";
	//This is how we join the new thread with main
	for (int i = 0; i < num_of_threads; ++i) {
		threads[i].join();
	}
	//getchar();
	return 0;
}


#include <iostream>
#include <cstdlib>
#include <pthread.h>
using namespace std;
#define NUM_THREADS 5
void *PrintHello(void *threadid) {
   long tid;
   tid = (long)threadid;
   cout << "Hello World! Thread ID, " << tid << endl;
   pthread_exit(NULL);
}
int main () {
   pthread_t threads[NUM_THREADS];
   int rc;   int i;
   for( i = 0; i < NUM_THREADS; i++ ) {
      cout << "main() : creating thread, " << i << endl;
      rc = pthread_create(&threads[i], NULL, PrintHello, (void *)i);
      if (rc) {
         cout << "Error:unable to create thread," << rc << endl;
         exit(-1);
      }
   }
   pthread_exit(NULL);
}



g++ thread1.cpp  -lpthread -w
./a.out



#include <iostream>
#include <cstdlib>
#include <string.h>
#include <pthread.h>
using namespace std;
#define NUM_THREADS 5
struct thread_data {
   int  thread_id;
   char message[100];
};
void *PrintHello(void *threadarg) {
   struct thread_data *my_data;
   my_data = (struct thread_data *) threadarg;
   cout << "Thread ID : " << my_data->thread_id ;
   cout << " Message : " << my_data->message << endl;
   pthread_exit(NULL);
}
int main () {
   pthread_t threads[NUM_THREADS];
   struct thread_data td[NUM_THREADS];
   int rc;
   int i;
   for( i = 0; i < NUM_THREADS; i++ ) {
      cout <<"main() : creating thread, " << i << endl;
      td[i].thread_id = i;
      strcpy(td[i].message,"This is message");
      rc = pthread_create(&threads[i], NULL, PrintHello, (void *)&td[i]);
       if (rc) {
         cout << "Error:unable to create thread," << rc << endl;
         exit(-1);
      }
   }
   pthread_exit(NULL);
}







#include <iostream>
#include <cstdlib>
#include <pthread.h>
#include <unistd.h>
using namespace std;
#define NUM_THREADS 5
void *wait(void *t) {
   int i;
   long tid;
   tid = (long)t;
   sleep(1);
   cout << "Sleeping in thread " << endl;
   cout << "Thread with id : " << tid << "  ...exiting " << endl;
   pthread_exit(NULL);
}
int main () {
   int rc;
   int i;
   pthread_t threads[NUM_THREADS];
   pthread_attr_t attr;
   void *status;
   // Initialize and set thread joinable
pthread_attr_init(&attr);
   pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_JOINABLE);
   for( i = 0; i < NUM_THREADS; i++ ) {
      cout << "main() : creating thread, " << i << endl;
      rc = pthread_create(&threads[i], &attr, wait, (void *)i );
      if (rc) {
         cout << "Error:unable to create thread," << rc << endl;
         exit(-1);
      }
   }
   // free attribute and wait for the other threads
   pthread_attr_destroy(&attr);
   for( i = 0; i < NUM_THREADS; i++ ) {
      rc = pthread_join(threads[i], &status);
      if (rc) {
         cout << "Error:unable to join," << rc << endl;
         exit(-1);
      }
      cout << "Main: completed thread id :" << i ;
      cout << "  exiting with status :" << status << endl;
   }
   cout << "Main: program exiting." << endl;
   pthread_exit(NULL);
}







#include<stdio.h> 
#include<string.h> 
#include<pthread.h> 
#include<stdlib.h> 
#include<unistd.h> 
pthread_t tid[2]; 
int counter; 
void* trythis(void *arg) { 
	unsigned long i = 0; 
	counter += 1; 
	printf("\n Job %d has started\n", counter); 
	for(i=0; i<(0xFFFFFFFF);i++); 
	printf("\n Job %d has finished\n", counter); 
	return NULL; 
} 
int main(void) { 
	int i = 0; 
	int error; 
	while(i < 2) 	{ 
		error = pthread_create(&(tid[i]), NULL, &trythis, NULL); 
 		if (error != 0) 
		    printf("\nThread can't be created : [%s]", strerror(error)); 
		i++; 
	} 
	pthread_join(tid[0], NULL); 
	pthread_join(tid[1], NULL); 
	return 0; 
} 




#include<stdio.h> 
#include<string.h> 
#include<pthread.h> 
#include<stdlib.h> 
#include<unistd.h> 
pthread_t tid[2]; 
int counter; 
pthread_mutex_t lock; 
void* trythis(void *arg) { 
	pthread_mutex_lock(&lock); 
	unsigned long i = 0; 
	counter += 1; 
	printf("\n Job %d has started\n", counter); 
	for(i=0; i<(0xFFFFFFFF);i++); 
	printf("\n Job %d has finished\n", counter); 
	pthread_mutex_unlock(&lock); 
	return NULL; 
} 
int main(void)  { 
	int i = 0; 
	int error; 
	if (pthread_mutex_init(&lock, NULL) != 0) 	{ 
		printf("\n mutex init has failed\n"); 
		return 1;  	} 
	while(i < 2) 	{ 
		error = pthread_create(&(tid[i]), NULL, &trythis, NULL); 
		if (error != 0) 
		    printf("\nThread can't be created :[%s]", strerror(error)); 
		i++; 
	} 
	pthread_join(tid[0], NULL); 
	pthread_join(tid[1], NULL); 
	pthread_mutex_destroy(&lock); 
	return 0; 
} 






#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
pthread_mutex_t count_mutex     = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t  condition_var   = PTHREAD_COND_INITIALIZER;
void *functionCount1(void *);
void *functionCount2(void *);
int  count = 0;
#define COUNT_DONE  10
#define COUNT_HALT1  3
#define COUNT_HALT2  6
main() {
   pthread_t thread1, thread2;
   pthread_create( &thread1, NULL, &functionCount1, NULL);
   pthread_create( &thread2, NULL, &functionCount2, NULL);
   pthread_join( thread1, NULL);
   pthread_join( thread2, NULL);
   printf("Final count: %d\n",count);
   exit(EXIT_SUCCESS);
}
// Write numbers 1-3 and 8-10 as permitted by  functionCount2()
void *functionCount1(void *) {
   for(;;)   {
      // Lock mutex and then wait for signal to relase mutex
      pthread_mutex_lock( &count_mutex );
      // Wait while functionCount2() operates on count
      // mutex unlocked if condition varialbe in functionCount2() signaled.
      pthread_cond_wait( &condition_var, &count_mutex );
      count++;
      printf("Counter value functionCount1: %d\n",count);
      pthread_mutex_unlock( &count_mutex );
      if(count >= COUNT_DONE) return(NULL);
    }   }
// Write numbers 4-7
void *functionCount2(void *) {
    for(;;)    {
       pthread_mutex_lock( &count_mutex );
       if( count < COUNT_HALT1 || count > COUNT_HALT2 )        {
          // Condition of if statement has been met. 
          // Signal to free waiting thread by freeing the mutex.
          // Note: functionCount1() is now permitted to modify "count".
          pthread_cond_signal( &condition_var );	       }
       else       {
          count++;
          printf("Counter value functionCount2: %d\n",count);
       }
       pthread_mutex_unlock( &count_mutex );
       if(count >= COUNT_DONE) return(NULL);
    }  }







#include <pthread.h>
#include <stdio.h>
void *f1(void *) {
        printf("thread 1\n");
}
void *f2(void *) {
        printf("thread 2\n");
}
int main() {
        pthread_t myThread[2];
        pthread_create(&myThread[0], 0, f1, 0);
        pthread_create(&myThread[1], 0, f2, 0);
        pthread_join(myThread[0], 0);
        pthread_join(myThread[1], 0);
        return 0;
}




